{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc43b10a",
   "metadata": {
    "papermill": {
     "duration": 0.002982,
     "end_time": "2025-08-21T22:28:39.935510",
     "exception": false,
     "start_time": "2025-08-21T22:28:39.932528",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Classical Perceptron Experiment: Teaching a Machine to Decide Yes or No\n",
    "\n",
    "## What is a Perceptron?\n",
    "\n",
    "A **Perceptron** is the computational equivalent to a single neuron (brain cell), which is all it takes to make yes/no, true/false, 1/0 type of decisions. Initially theorized by Pitts & McCollough and implemented by Frank Rosenblatt in 1957, it was the first algorithm that was capable of **learning from experience** similar to humans.\n",
    "\n",
    "### Biological Neuron vs Artificial Perceptron\n",
    "\n",
    "The perceptron was inspired by the human neuron, let's compare their components:\n",
    "\n",
    "#### **Biological Neuron:**\n",
    "```mermaid\n",
    "flowchart LR\n",
    "    subgraph DENDRITES [\" \"]\n",
    "        D1[\"Dendrite<br/>Signal 1\"]\n",
    "        D2[\"Dendrite<br/>Signal 2\"] \n",
    "        D3[\"Dendrite<br/>Signal 3\"]\n",
    "        D4[\"...\"]\n",
    "        DN[\"Dendrite<br/>Signal N\"]\n",
    "    end\n",
    "    \n",
    "    D1 --> CB\n",
    "    D2 --> CB\n",
    "    D3 --> CB\n",
    "    D4 --> CB\n",
    "    DN --> CB\n",
    "    \n",
    "    CB[\"<br/>Cell Body<br/>(Soma)<br/>Integration\"] --> AX[\"Axon<br/>Transmission\"] --> OUT[\"Signal to<br/>Next Neuron\"]\n",
    "    \n",
    "    style D1 fill:#e8f5e8\n",
    "    style D2 fill:#e8f5e8\n",
    "    style D3 fill:#e8f5e8\n",
    "    style DN fill:#e8f5e8\n",
    "    style CB fill:#fff3e0\n",
    "    style AX fill:#e1f5fe\n",
    "    style OUT fill:#ffebee\n",
    "    style DENDRITES fill:none,stroke:none\n",
    "```\n",
    "\n",
    "#### **Artificial Perceptron:**\n",
    "```mermaid\n",
    "flowchart LR\n",
    "    subgraph INPUTS [\" \"]\n",
    "        B[\"x₀ = 1<br/>(Bias)\"]\n",
    "        I1[\"x₁<br/>(Input 1)\"]\n",
    "        I2[\"x₂<br/>(Input 2)\"]\n",
    "        I3[\"...<br/>\"]\n",
    "        IN[\"xₙ<br/>(Input N)\"]\n",
    "    end\n",
    "    \n",
    "    B -->|\"b\"| PERC\n",
    "    I1 -->|\"w₁\"| PERC\n",
    "    I2 -->|\"w₂\"| PERC  \n",
    "    I3 -->|\"...\"| PERC\n",
    "    IN -->|\"wₙ\"| PERC\n",
    "    \n",
    "    PERC[\"<br/>z = Σ(wᵢxᵢ) + b<br/>y = f(z)<br/>\"] --> OUT[\"y<br/>Output<br/>(0 or 1)\"]\n",
    "    \n",
    "    style B fill:#fff3e0\n",
    "    style I1 fill:#e8f5e8\n",
    "    style I2 fill:#e8f5e8\n",
    "    style IN fill:#e8f5e8\n",
    "    style PERC fill:#4285f4,color:#fff\n",
    "    style OUT fill:#ffebee\n",
    "    style INPUTS fill:none,stroke:none\n",
    "```\n",
    "\n",
    "**The Connection:**\n",
    "- **Dendrites** ↔ **Inputs**: Receive signals from environment\n",
    "- **Synaptic Weights** ↔ **Artificial Weights**: Determine signal importance\n",
    "- **Cell Body** ↔ **Summation**: Integrates all incoming signals\n",
    "- **Axon Firing** ↔ **Activation Function**: Decides whether to \"fire\" (output 1 or 0)\n",
    "\n",
    "## Our Experiment: T vs J Classification\n",
    "\n",
    "We're going to teach our perceptron to tell the difference between the letters **T** and **J** in 4×4 pixel images where each pixel can be on or off. Imagine the perceptron is a child and you are teaching them to classify between two different letters.\n",
    "\n",
    "Before we start teaching the perceptron we need to collect the data we plan to train on, which in our case will be examples of T and J in 4x4 pixel images.\n",
    "\n",
    "### Pixel Images:\n",
    "Here are our 4×4 pixel training examples. Each `■` represents an ON pixel (value = 1) and each `□` represents an OFF pixel (value = 0):\n",
    "\n",
    "#### **T Patterns:**\n",
    "```\n",
    "Pattern 1:          Pattern 2:\n",
    "■ ■ ■ □             □ ■ ■ ■\n",
    "□ ■ □ □             □ □ ■ □\n",
    "□ ■ □ □             □ □ ■ □\n",
    "□ ■ □ □             □ □ ■ □\n",
    "\n",
    "Array format:       Array format:\n",
    "[1,1,1,0]          [0,1,1,1]\n",
    "[0,1,0,0]          [0,0,1,0]\n",
    "[0,1,0,0]          [0,0,1,0]\n",
    "[0,1,0,0]          [0,0,1,0]\n",
    "```\n",
    "\n",
    "#### **J Patterns:**\n",
    "```\n",
    "Pattern 1:          Pattern 2:\n",
    "□ □ ■ □             □ □ □ ■\n",
    "□ □ ■ □             □ □ □ ■\n",
    "■ □ ■ □             □ ■ □ ■\n",
    "■ ■ ■ □             □ ■ ■ ■\n",
    "\n",
    "Array format:       Array format:\n",
    "[0,0,1,0]          [0,0,0,1]\n",
    "[0,0,1,0]          [0,0,0,1]\n",
    "[1,0,1,0]          [0,1,0,1]\n",
    "[1,1,1,0]          [0,1,1,1]\n",
    "```\n",
    "\n",
    "**Our Goal:**\n",
    "- **T patterns** → Should output **1** (meaning \"this is a T\")\n",
    "- **J patterns** → Should output **0** (meaning \"this is a J - or more accurately this is not a T\")\n",
    "\n",
    "This builds a binary classifier and reminds me of the scene in Silicon Valley when Jian Yang, builds a Hotdog/Not Hotdog classifier\n",
    "\n",
    "![Hotdog/Not Hotdog](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNm1zY2g2ZnZwNm1waWxjMzUzZ3V0bXJnN2dnZ3JvOTJ0aWh0Z2dqbyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l0Iy9iqThC2ueLTkA/giphy.gif)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dff17a9c",
   "metadata": {
    "papermill": {
     "duration": 0.002473,
     "end_time": "2025-08-21T22:28:39.940865",
     "exception": false,
     "start_time": "2025-08-21T22:28:39.938392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Perceptron Architecture\n",
    "\n",
    "Before starting let's put on our systems thinking hat to contextualize the perceptron as a decision-making machine with:\n",
    "\n",
    "- **Inputs**: 16 pixel values from a 4×4 image (each pixel is either ON=1 or OFF=0)\n",
    "- **Weights**: 16 weights (one for each pixel) + 1 bias = 17\n",
    "- **Output**: One final decision - 1 for T, 0 for J\n",
    "\n",
    "### Visual Representation:\n",
    "\n",
    "```mermaid\n",
    "flowchart LR\n",
    "    subgraph INPUTS [\" \"]\n",
    "        B[\"x₀ = 1<br/>(Bias)\"]\n",
    "        I1[\"x₁<br/>(Input 1)\"]\n",
    "        I2[\"x₂<br/>(Input 2)\"]\n",
    "        I3[\"...<br/>\"]\n",
    "        IN[\"xₙ<br/>(Input N)\"]\n",
    "    end\n",
    "    \n",
    "    B -->|\"b\"| PERC\n",
    "    I1 -->|\"w₁\"| PERC\n",
    "    I2 -->|\"w₂\"| PERC  \n",
    "    I3 -->|\"...\"| PERC\n",
    "    IN -->|\"wₙ\"| PERC\n",
    "    \n",
    "    PERC[\"<br/>z = Σ(wᵢxᵢ) + b<br/>y = f(z)<br/>Perceptron\"] --> OUT[\"y<br/>Output<br/>(0 or 1)\"]\n",
    "    \n",
    "    style B fill:#fff3e0\n",
    "    style I1 fill:#e8f5e8\n",
    "    style I2 fill:#e8f5e8\n",
    "    style IN fill:#e8f5e8\n",
    "    style PERC fill:#4285f4,color:#fff\n",
    "    style OUT fill:#ffebee\n",
    "    style INPUTS fill:none,stroke:none\n",
    "```\n",
    "\n",
    "## The Forward Pass: How It Makes Decisions\n",
    "\n",
    "Now that we understand the architecture of our system let's think about the flow of information forward through the neural network.\n",
    "\n",
    "### Step 1: Calculate Signal Strength\n",
    "**Mathematical Formula:**\n",
    "```\n",
    "Signal Strength = (weight₁ × pixel₁) + (weight₂ × pixel₂) + ... + (weight₁₆ × pixel₁₆) + bias\n",
    "```\n",
    "\n",
    "### Step 2: Make the Final Decision\n",
    "**Mathematical Formula:**\n",
    "```\n",
    "IF Signal_Strength ≥ 0 THEN\n",
    "    Output = 1  (This is a T!)\n",
    "ELSE\n",
    "    Output = 0  (This is a J!)\n",
    "```\n",
    "\n",
    "## The Learning Algorithm: How It Gets Smarter\n",
    "\n",
    "Now that we understand the forward flow, let's think about how we update our neural network to improve it's performance by adjusting it's weights based on the Perceptron learning algorithm. This simple learning algorithm won't scale to solve multi-classification problems, but it is true to the original experiment. This backward flow of updating the networks weights based on the error rate of desired outputs and actual outputs is an early form of back propagation which would lead to modern learning algorithms such as stochastic gradient descent.\n",
    "\n",
    "**Mathematical Formula:**\n",
    "```\n",
    "new_weight_i = old_weight_i + (learning_rate × error × input_i)\n",
    "```\n",
    "\n",
    "Where:\n",
    "- **learning_rate** (η) = How big steps to take when learning (typically 0.1)\n",
    "- **error** = desired_output - actual_output\n",
    "- **input_i** = The value of pixel i (0 or 1)\n",
    "\n",
    "\n",
    "## Do the Damn Thing\n",
    "\n",
    "Alright that is enough talking through the theory and conceptualizing with systems thinking it's time to do the damn thing. Run the code below and understand we are doing in each cell by following this flow.\n",
    "\n",
    "1. Import libraries and seed the random number generator\n",
    "2. Initialize the Perceptron class\n",
    "3. Create the dataset with variations\n",
    "4. Split the data into test and training data to prevent data leakage\n",
    "5. Train the perceptron on our training data to reach convergence (change the seed to play with epochs to convergence)\n",
    "6. Visualize our training to understand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9353dabc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:39.947047Z",
     "iopub.status.busy": "2025-08-21T22:28:39.946748Z",
     "iopub.status.idle": "2025-08-21T22:28:41.580916Z",
     "shell.execute_reply": "2025-08-21T22:28:41.579887Z"
    },
    "papermill": {
     "duration": 1.639133,
     "end_time": "2025-08-21T22:28:41.582557",
     "exception": false,
     "start_time": "2025-08-21T22:28:39.943424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from typing import Tuple\n",
    "\n",
    "# Configuration\n",
    "RANDOM_SEED = 123\n",
    "np.random.seed(RANDOM_SEED)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4438dea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:41.589286Z",
     "iopub.status.busy": "2025-08-21T22:28:41.588821Z",
     "iopub.status.idle": "2025-08-21T22:28:41.600440Z",
     "shell.execute_reply": "2025-08-21T22:28:41.599141Z"
    },
    "papermill": {
     "duration": 0.016682,
     "end_time": "2025-08-21T22:28:41.601965",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.585283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Perceptron classed initialized\n"
     ]
    }
   ],
   "source": [
    "class Perceptron:\n",
    "    \"\"\"Perceptron class\"\"\"\n",
    "    \n",
    "    def __init__(self, learning_rate: float = 0.1, max_epochs: int = 20, random_state: int = None):\n",
    "        self.learning_rate = learning_rate\n",
    "        self.max_epochs = max_epochs\n",
    "        self.random_state = random_state\n",
    "        self.weights = None\n",
    "        self.history = []\n",
    "    \n",
    "    def fit(self, X: np.ndarray, y: np.ndarray, verbose: bool = True) -> 'Perceptron':\n",
    "        \"\"\"Train using the perceptron learning rule.\"\"\"\n",
    "        n_samples, n_features = X.shape\n",
    "        \n",
    "        # Initialize weights with controlled randomness\n",
    "        if self.random_state is not None:\n",
    "            np.random.seed(self.random_state)\n",
    "        self.weights = np.random.normal(0, 0.5, n_features)\n",
    "        \n",
    "        # Training loop\n",
    "        for epoch in range(self.max_epochs):\n",
    "            errors = 0\n",
    "            \n",
    "            for xi, target in zip(X, y):\n",
    "                prediction = int(np.dot(xi, self.weights) >= 0)\n",
    "                error = target - prediction\n",
    "                \n",
    "                if error != 0:\n",
    "                    errors += 1\n",
    "                    self.weights += self.learning_rate * error * xi\n",
    "            \n",
    "            self.history.append(errors)\n",
    "            if verbose:\n",
    "                print(f\"Epoch {epoch+1:2d}: {errors} errors\")\n",
    "            \n",
    "            if errors == 0:\n",
    "                if verbose:\n",
    "                    print(f\"✅ Converged in {epoch+1} epochs\")\n",
    "                break\n",
    "        \n",
    "        return self\n",
    "    \n",
    "    def predict(self, X: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Predict class labels.\"\"\"\n",
    "        return np.array([int(np.dot(x, self.weights) >= 0) for x in X])\n",
    "    \n",
    "    def score(self, X: np.ndarray, y: np.ndarray) -> float:\n",
    "        \"\"\"Calculate accuracy.\"\"\"\n",
    "        return np.mean(self.predict(X) == y)\n",
    "\n",
    "print(\"Perceptron classed initialized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "106c158d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:41.608489Z",
     "iopub.status.busy": "2025-08-21T22:28:41.608156Z",
     "iopub.status.idle": "2025-08-21T22:28:41.618421Z",
     "shell.execute_reply": "2025-08-21T22:28:41.617175Z"
    },
    "papermill": {
     "duration": 0.015331,
     "end_time": "2025-08-21T22:28:41.620051",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.604720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset: 16 samples, 17 features\n",
      "Classes: [8 8] [J, T]\n",
      "\n",
      "\n",
      "Dataset created\n"
     ]
    }
   ],
   "source": [
    "def create_dataset() -> Tuple[np.ndarray, np.ndarray]:\n",
    "    \"\"\"Create T vs J dataset with variations.\"\"\"\n",
    "    \n",
    "    patterns = {\n",
    "        'T': [[1,1,1,0, 0,1,0,0, 0,1,0,0, 0,1,0,0],  # Standard T\n",
    "              [0,1,1,1, 0,0,1,0, 0,0,1,0, 0,0,1,0]], # Right T\n",
    "        'J': [[0,0,1,0, 0,0,1,0, 1,0,1,0, 1,1,1,0],  # Standard J\n",
    "              [0,0,0,1, 0,0,0,1, 0,1,0,1, 0,1,1,1]]  # Right J\n",
    "    }\n",
    "    \n",
    "    X, y = [], []\n",
    "    \n",
    "    for letter, base_patterns in patterns.items():\n",
    "        label = 1 if letter == 'T' else 0\n",
    "        \n",
    "        for pattern in base_patterns:\n",
    "            # Original\n",
    "            X.append([1] + pattern)  # Add bias\n",
    "            y.append(label)\n",
    "            \n",
    "            # Add 3 noisy variations\n",
    "            for _ in range(3):\n",
    "                noisy = np.array(pattern)\n",
    "                mask = np.random.random(16) < 0.05\n",
    "                noisy[mask] = 1 - noisy[mask]\n",
    "                X.append([1] + noisy.tolist())\n",
    "                y.append(label)\n",
    "    \n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "# Generate data\n",
    "X, y = create_dataset()\n",
    "print(f\"Dataset: {len(X)} samples, {X.shape[1]} features\")\n",
    "print(f\"Classes: {np.bincount(y)} [J, T]\")\n",
    "print(\"\\n\")\n",
    "print(\"Dataset created\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4dc79e9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:41.626575Z",
     "iopub.status.busy": "2025-08-21T22:28:41.626281Z",
     "iopub.status.idle": "2025-08-21T22:28:41.641247Z",
     "shell.execute_reply": "2025-08-21T22:28:41.640214Z"
    },
    "papermill": {
     "duration": 0.019857,
     "end_time": "2025-08-21T22:28:41.642586",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.622729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train: 11 samples, Test: 5 samples\n"
     ]
    }
   ],
   "source": [
    "# Split data (no leakage)\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.3, random_state=RANDOM_SEED, stratify=y\n",
    ")\n",
    "\n",
    "print(f\"Train: {len(X_train)} samples, Test: {len(X_test)} samples\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcf906b6",
   "metadata": {
    "papermill": {
     "duration": 0.00225,
     "end_time": "2025-08-21T22:28:41.647525",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.645275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train the Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "770b91d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:41.653823Z",
     "iopub.status.busy": "2025-08-21T22:28:41.653371Z",
     "iopub.status.idle": "2025-08-21T22:28:41.664403Z",
     "shell.execute_reply": "2025-08-21T22:28:41.663221Z"
    },
    "papermill": {
     "duration": 0.016125,
     "end_time": "2025-08-21T22:28:41.666217",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.650092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch  1: 8 errors\n",
      "Epoch  2: 5 errors\n",
      "Epoch  3: 1 errors\n",
      "Epoch  4: 0 errors\n",
      "✅ Converged in 4 epochs\n",
      "\n",
      "📊 Results:\n",
      "Train accuracy: 100.0%\n",
      "Test accuracy: 100.0%\n"
     ]
    }
   ],
   "source": [
    "# Train perceptron\n",
    "model = Perceptron(learning_rate=0.1, max_epochs=20, random_state=RANDOM_SEED)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate\n",
    "print(f\"\\n📊 Results:\")\n",
    "print(f\"Train accuracy: {model.score(X_train, y_train):.1%}\")\n",
    "print(f\"Test accuracy: {model.score(X_test, y_test):.1%}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "06fc483e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T22:28:41.673914Z",
     "iopub.status.busy": "2025-08-21T22:28:41.673053Z",
     "iopub.status.idle": "2025-08-21T22:28:42.330587Z",
     "shell.execute_reply": "2025-08-21T22:28:42.329384Z"
    },
    "papermill": {
     "duration": 0.663131,
     "end_time": "2025-08-21T22:28:42.332161",
     "exception": false,
     "start_time": "2025-08-21T22:28:41.669030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✅ Perceptron successfully learned to distinguish T from J!\n"
     ]
    }
   ],
   "source": [
    "# Visualize results\n",
    "fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 4))\n",
    "\n",
    "# Learning curve\n",
    "ax1.plot(range(1, len(model.history)+1), model.history, 'b-o', linewidth=2)\n",
    "ax1.set_xlabel('Epoch')\n",
    "ax1.set_ylabel('Errors')\n",
    "ax1.set_title('Learning Progress')\n",
    "ax1.grid(True, alpha=0.3)\n",
    "\n",
    "# Weight heatmap\n",
    "weights = model.weights[1:].reshape(4, 4)\n",
    "vmax = np.abs(weights).max()\n",
    "im = ax2.imshow(weights, cmap='RdBu', vmin=-vmax, vmax=vmax)\n",
    "ax2.set_title('Learned Weights\\n(Red→T, Blue→J)')\n",
    "plt.colorbar(im, ax=ax2)\n",
    "\n",
    "for i in range(4):\n",
    "    for j in range(4):\n",
    "        ax2.text(j, i, f'{weights[i,j]:.2f}', ha='center', va='center',\n",
    "                color='white' if abs(weights[i,j]) > vmax*0.6 else 'black')\n",
    "\n",
    "# Confusion matrix\n",
    "pred = model.predict(X_test)\n",
    "cm = [[np.sum((y_test==0) & (pred==0)), np.sum((y_test==0) & (pred==1))],\n",
    "      [np.sum((y_test==1) & (pred==0)), np.sum((y_test==1) & (pred==1))]]\n",
    "\n",
    "ax3.imshow(cm, cmap='Blues')\n",
    "ax3.set_title('Confusion Matrix')\n",
    "ax3.set_xticks([0,1])\n",
    "ax3.set_yticks([0,1])\n",
    "ax3.set_xticklabels(['J', 'T'])\n",
    "ax3.set_yticklabels(['J', 'T'])\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(2):\n",
    "        ax3.text(j, i, str(cm[i][j]), ha='center', va='center',\n",
    "                color='white' if cm[i][j] > 2 else 'black', fontsize=14)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"\\n✅ Perceptron successfully learned to distinguish T from J!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdbf4f90",
   "metadata": {
    "papermill": {
     "duration": 0.003629,
     "end_time": "2025-08-21T22:28:42.340010",
     "exception": false,
     "start_time": "2025-08-21T22:28:42.336381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 🏆 Summary: T vs J Classification Success!\n",
    "\n",
    "### ✅ What We Accomplished:\n",
    "\n",
    "**Started with:**\n",
    "- Random weights and bias\n",
    "- Your exact 4x4 T and J patterns\n",
    "\n",
    "**The Learning Algorithm:**\n",
    "```python\n",
    "weights += learning_rate * error * input_features\n",
    "```\n",
    "\n",
    "**Results:**\n",
    "- ✅ **Perfect classification** of all T and J patterns\n",
    "- ✅ **Clear weight changes** from random to meaningful values  \n",
    "- ✅ **Convergence** to expected outputs (T=1, J=0)\n",
    "- ✅ **Visible learning** through weight updates on each training pass\n",
    "\n",
    "**Key Insights:**\n",
    "- The perceptron learned which pixel positions distinguish T from J\n",
    "- Red weights favor T patterns (output 1)\n",
    "- Blue weights favor J patterns (output 0)\n",
    "- The bias weight helps set the decision threshold\n",
    "\n",
    "**🎯 Frank Rosenblatt's 1957 algorithm successfully learned to classify your T and J patterns through experience!**\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.282544,
   "end_time": "2025-08-21T22:28:42.862230",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-21T22:28:34.579686",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
